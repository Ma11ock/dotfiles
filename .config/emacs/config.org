#+TITLE: Ryan Jeffrey's Emacs config
#+AUTHOR: Ryan Jeffrey
#+EMAIL: ryan@ryanmj.xyz
#+OPTIONS: num:nil

* Emacs
** init
#+BEGIN_SRC emacs-lisp

(eval-when-compile
  (require 'use-package))

(defalias 'yes-or-no-p 'y-or-n-p)

(set-frame-parameter (selected-frame) 'alpha '(85 . 85))
(add-to-list 'default-frame-alist '(alpha . (85 . 85)))

#+END_SRC
** font and theme
#+BEGIN_SRC emacs-lisp

 (add-to-list 'load-path (concat user-emacs-directory "lisp/"))

 (setq x-gtk-use-system-tooltips nil)     

 ;; font
 (if (string= system-name "Southpark")
     (add-to-list 'default-frame-alist
		  '(font . "Hasklig:size=20:antialias=true:autohint=true:family=mono"))
   (add-to-list 'default-frame-alist
		'(font . "Hasklig:size=16:antialias=true:autohint=true:family=mono")))

 (use-package prettify-symbols-mode
   :init 
   (defconst lisp--prettify-symbols-alist
     '(("lambda"  . ?Î»)))
   :hook
   (lisp-mode))


 (add-to-list 'load-path (concat user-emacs-directory "/themes/"))


(use-package modus-themes
  :ensure t
  :init
  (setq modus-themes-slanted-constructs t
       modus-themes-bold-constructs nil
       modus-themes-fringes nil ; {nil,'subtle,'intense}

       ;; Options for `modus-themes-lang-checkers': nil,
       ;; 'straight-underline, 'subtle-foreground,
       ;; 'subtle-foreground-straight-underline, 'intense-foreground,
       ;; 'intense-foreground-straight-underline, 'colored-background
       modus-themes-lang-checkers nil

       ;; Options for `modus-themes-mode-line': nil, '3d, 'moody,
       ;; 'borderless, 'borderless-3d, 'borderless-moody, 'accented,
       ;; 'accented-3d, 'accented-moody
       modus-themes-mode-line 'accented-3d

       ;; Options for `modus-themes-syntax': nil, 'faint,
       ;; 'yellow-comments, 'green-strings,
       ;; 'yellow-comments-green-strings, 'alt-syntax,
       ;; 'alt-syntax-yellow-comments, 'faint-yellow-comments
       modus-themes-syntax nil

       ;; Options for `modus-themes-hl-line': nil, 'intense-background,
       ;; 'accented-background, 'underline-neutral,
       ;; 'underline-accented, 'underline-only-neutral,
       ;; 'underline-only-accented
       modus-themes-hl-line 'underline-neutral
       modus-themes-subtle-line-numbers nil
       modus-themes-paren-match 'subtle-bold ; {nil,'subtle-bold,'intense,'intense-bold}

       ;; Options for `modus-themes-links': nil, 'faint,
       ;; 'neutral-underline, 'faint-neutral-underline, 'no-underline,
       ;; 'underline-only, 'neutral-underline-only
       modus-themes-links 'neutral-underline
       modus-themes-no-mixed-fonts nil

       ;; Options for `modus-themes-prompts': nil, 'subtle-accented,
       ;; 'intense-accented, 'subtle-gray, 'intense-gray
       modus-themes-prompts 'subtle-gray
       modus-themes-completions 'moderate ; {nil,'moderate,'opinionated}

       ;; Options for `modus-themes-region': nil, 'no-extend, 'bg-only,
       ;; 'bg-only-no-extend, 'accent, 'accent-no-extend
       modus-themes-region 'accent-no-extend

       ;; Options for `modus-themes-diffs': nil, 'desaturated,
       ;; 'fg-only, 'bg-only, 'deuteranopia,
       modus-themes-diffs 'deuteranopia

       modus-themes-org-blocks nil ; {nil,'grayscale,'rainbow}
       modus-themes-org-habit nil ; {nil,'simplified,'traffic-light}

       modus-themes-headings ; this is an alist: read the manual
       '((1 . rainbow-section)
         (2 . rainbow-line)
         (3 . rainbow))

       modus-themes-variable-pitch-ui nil
       modus-themes-variable-pitch-headings nil
       modus-themes-scale-headings nil
       modus-themes-scale-1 1
       modus-themes-scale-2 1
       modus-themes-scale-3 1
       modus-themes-scale-4 1
       modus-themes-scale-5 1)
 ;; Load the theme files before enabling a theme (else you get an error).
 (modus-themes-load-themes)

 ;; Enable the theme at startup.  This is done after loading the files.
 ;; You only need `modus-themes-load-operandi' for the light theme or
 ;; `modus-themes-load-vivendi' for the dark one.  What I have here is
 ;; a simple test to load a light/dark theme based on some general time
 ;; ranges (just accounting for the hour and without checking for the
 ;; actual sunrise/sunset times).  Plus we have `modus-themes-toggle'
 ;; to switch themes at will.
 (let ((time (string-to-number (format-time-string "%H"))))
   (if (and (> time 5) (< time 18))
       (modus-themes-load-operandi)
     (modus-themes-load-vivendi)))

 ;; Also check my package configurations for `prot-fonts' because I use
 ;; the `modus-themes-after-load-theme-hook' for some typeface-related
 ;; tweaks (as those are made at the "face" level).
 (define-key global-map (kbd "<f5>") #'modus-themes-toggle))

 (global-set-key (kbd "M-S-<up>") 'text-scale-increase)
 (global-set-key (kbd "M-S-<down>") 'text-scale-decrease)
 (scroll-bar-mode nil)

 (use-package shr
   :commands (eww
	      eww-browse-url)
   :config
					 ;(setq browse-url-browser-function 'eww-browse-url)
   (setq shr-use-fonts nil)
   (setq shr-use-colors nil)
   (setq shr-max-image-proportion 0.2)
   (setq shr-width (current-fill-column)))


#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :init
  (global-set-key (kbd "C-s") 'swiper)
  :ensure t)

(use-package counsel
  :ensure t)

#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
(setq tty-menu-open-use-tmm t)
(global-set-key [f10] 'tmm-menubar)
(put 'upcase-region 'disabled nil)
(electric-pair-mode t)
(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq column-number-mode t)
(display-time-mode 1)
(tool-bar-mode -1)
(menu-bar-mode -1) 
(scroll-bar-mode -1)
(setq ring-bell-function 'ignore)
(blink-cursor-mode 0)
(set-language-environment "UTF-8")
(setq redisplay-dont-pause t)
(setq vc-follow-symlinks t) ; Otherwise emacs asks
(setq tramp-terminal-type "tramp") ; See zshrc
(add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)


(setenv "MANWIDTH" "100") ; For man mode

;; Man-mode auto-kill frame on exit. Should only be called from shell.
(defun man-mode-shell (man-page)
  (add-hook 'man-end-hook '(lambda () 
                             (setq man-end-hook nil)
                             (delete-frame)
                             (message "Heck")))
  (man man-page)
  (delete-window))

;; TODO Smithets
(global-set-key (kbd "M-SPC") #'(lambda ()
                                  (interactive)
                                  (search-forward "<++>")
                                  (delete-backward-char 4)))


#+END_SRC

** Filename-mode associations, modes for specific file types
#+BEGIN_SRC emacs-lisp

(use-package conf-mode
  :init
  (add-to-list 'auto-mode-alist '("/sxhkdrc\\'" . conf-unix-mode))
  (add-to-list 'auto-mode-alist '("/zshrc\\'" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\config\\'" . conf-mode))
  (add-to-list 'auto-mode-alist '("\\.Xdefaults'" . conf-xdefaults-mode))
  (add-to-list 'auto-mode-alist '("\\.Xresources'" conf-xdefaults-mode))
  (add-to-list 'auto-mode-alist '("\\.Xdefaults'" . conf-xdefaults-mode)))


(use-package systemd
  :ensure t
  :mode (("\\.service\\'" . systemd-mode)))

(use-package fish-mode
  :ensure t
  :mode (("\\.fish\\'" . fish-mode)))

(use-package rust-mode
  :ensure t
  :mode (("\\.rs\\'" . rust-mode)))

#+END_SRC
** joestar
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t)
(use-package highlight
  :ensure t)
(use-package joestar
  :init
  (add-to-list 'load-path (concat user-emacs-directory "joestar/"))
  (progn
    (defvar undo-tree-map
      (let ((map (make-sparse-keymap)))
        ;; remap `undo' and `undo-only' to `undo-tree-undo'
        (define-key map [remap undo] 'undo-tree-undo)
        (define-key map [remap undo-only] 'undo-tree-undo)
        ;; bind standard undo bindings (since these match redo counterparts)
        (define-key map (kbd "C-/") 'undo-tree-undo)
        (define-key map "\C-_" 'undo-tree-undo)
        ;; redo doesn't exist normally, so define our own keybindings
        (define-key map (kbd "C-?") 'undo-tree-redo)
        (define-key map (kbd "M-_") 'undo-tree-redo)
        ;; just in case something has defined `redo'...
        (define-key map [remap redo] 'undo-tree-redo)
        ;; we use "C-x u" for the undo-tree visualizer
        (define-key map (kbd "s-x u") 'undo-tree-visualize)
        ;; bind register commands
        (define-key map (kbd "s-x r u") 'undo-tree-save-state-to-register)
        (define-key map (kbd "s-x r U") 'undo-tree-restore-state-from-register)
        ;; set keymap
        (setq undo-tree-map map)))))

(global-joestar-mode)

;; global move window keys so non joestar buffers can still have these bindings
(global-set-key (kbd "M-<left>") #'(lambda ()
                                     (interactive)
                                     (other-window -1)))

(global-set-key (kbd "M-<right>") #'(lambda ()
                                      (interactive)
                                      (other-window 1)))

(global-set-key (kbd "S-<right>") 'joe-nbuf)
(global-set-key (kbd "S-<left>") 'joe-pbuf)


#+END_SRC
** markdown
#+begin_src emacs-lisp

(use-package markdown-mode
  :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

#+end_src
** org
#+BEGIN_SRC emacs-lisp

(use-package org
  :init 
  (setq org-src-preserve-indentation nil 
        org-edit-src-content-indentation 0)
  (require 'org-tempo)
  (add-hook 'org-mode-hook 'toggle-truncate-lines)
  (setq org-src-tab-acts-natively t)
  :bind (:map org-mode-map
              ("M-S-<up>" . 'text-scale-increase)
              ("M-S-<down>" . 'text-scale-decrease)))

(use-package org-indent-mode
  :config
  (org-indent-mode t)
  :hook org-mode)

(use-package org-bullets
  :ensure t)

(use-package wc-mode
  :ensure t
  :hook org-mode)

(use-package display-line-numbers-mode
  :hook org-mode)

(use-package company-auctex
  :ensure t)

;; Configuring LaTeX must be done like this because of legacy. 
(use-package tex-mode
  :ensure auctex
  :init
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (setq-default TeX-engine 'luatex)
  (setq-default TeX-PDF-mode t)
  (add-hook 'LaTeX-mode-hook #'flyspell-mode)
  (add-hook 'LaTeX-mode-hook #'wc-mode)
  (add-hook 'LaTeX-mode-hook #'display-line-numbers-mode)
  (add-hook 'LaTeX-mode-hook #'company-auctex-init)
  (add-hook 'LaTeX-mode-hook #'company-mode)
  (add-hook 'LaTeX-mode-hook #'TeX-source-correlate-mode)
  
  ;; (use-package auctex-latexmk
  ;;   :ensure t
  ;;   :init
  ;;   (add-to-list 'TeX-command-list '("-pvc"))
  ;;   (auctex-latexmk-setup)
  ;;   (add-hook 'LaTeX-mode-hook
  ;;             (lambda ()
  ;;               (add-hook 'after-save-hook #'(lambda ()
  ;;                                              (TeX-command-master "LaTeX")) nil t))))
  )

#+End_src
** vterm
#+BEGIN_SRC emacs-lisp
(when module-file-suffix
  (use-package vterm
    :ensure t
    :init (setq vterm-always-compile-module t)
    :bind (:map vterm-mode-map
                ("M-c" . 'vterm-copy-mode)
                ("M-i" . 'ido-switch-buffer))))

#+END_SRC
* IDE
** Clojure 
#+begin_src emacs-lisp
 (use-package cider
  :ensure t
  :bind (:map cider-mode-map
              ("M-e" . cider-eval-last-sexp)
              ("M-r" . cider-eval-region)
              )
  :init
  (eval-after-load "cider-mode"
    '(define-key cider-mode-map (kbd "C-x") 'joe-nextword)))

(use-package clojure-mode
  :ensure t)
#+end_src
** all programming languages
*** todos
#+BEGIN_SRC emacs-lisp
(use-package fic-mode
  :ensure t
  :init (add-hook 'prog-mode-hook 'fic-mode)
  :config
  (fic-mode t))

#+END_SRC
*** company
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :init (add-hook 'prog-mode-hook 'company-mode)
  :bind (:map company-active-map
              ("C-n" . company-select-next)
              ("C-p" . company-select-previous))
  :config
  (setq company-idle-delay 0.3)
  (setq company-tooltip-align-annotations t) ; aligns annotation to the right hand side
  (setq company-minimum-prefix-length 1)
  (setq company-clang-arguments '("-std=c++17"))
  (use-package company-c-headers
    :ensure t
    :init
    (add-to-list 'company-backends 'company-c-headers)))
#+end_src
*** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t)

#+end_src

** magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :init
;  (add-hook 'after-init-hook '(lambda ()
;                                (global-magit-file-mode -1)))

  (add-hook 'diff-mode-hook 'whitespace-mode))

#+end_src
** Misc
#+BEGIN_SRC emacs-lisp
(defun insert-current-date ()
  (interactive)
  (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))

(use-package gitignore-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.gitignore\\'" . gitignore-mode)) )

(use-package rainbow-mode
  :ensure t
  :hook (web-mode emacs-lisp-mode))

(use-package crontab-mode
  :ensure t)

(add-hook 'prog-mode-hook #'flyspell-prog-mode) ; Flyspell on comments and strings.

(use-package cmake-mode
   :ensure t)

#+END_SRC
** html 
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.api\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("/some/react/path/.*\\.js[x]?\\'" . web-mode))

  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-engines-alist
        '(("php"    . "\\.phtml\\'")
          ("blade"  . "\\.blade\\.")
          ("handlebars" . "\\.handlebars\\'")))

  (setq web-mode-content-types-alist
        '(("json" . "/some/path/.*\\.api\\'")
          ("xml"  . "/other/path/.*\\.api\\'")
          ("jsx"  . "/some/react/path/.*\\.js[x]?\\'")))
  (setq web-mode-markup-indent-offset 2)
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.handlebars\\'" . web-mode))
  (define-key web-mode-map (kbd "C-n") 'web-mode-tag-match)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-auto-closing t))

(use-package impatient-mode
  :ensure t
  :hook web-mode)

#+END_SRC
*** Emmet
#+BEGIN_SRC emacs-lisp

(use-package emmet-mode
  :ensure t
  :config
  (define-key web-mode-map (kbd "C-j") 'emmet-expand-line)
  (emmet-mode)
                                        ;      (emmet-preview-mode)
  :hook web-mode)

#+END_SRC

** C 
#+begin_src emacs-lisp

(use-package cc-mode
  :config
  (setq c-default-style "linux"
        c-basic-offset 4)
  (c-set-offset 'inline-open '0))



#+end_src
** JavaScript
#+begin_src emacs-lisp
(setq js-indent-level 2)
(use-package json-mode
  :ensure t)
#+end_src
** Python
#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :init
  (add-hook 'python-mode-hook #'(lambda ()
                                  (elpy-enable)
                                  (when (require 'flycheck nil t)
                                    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
                                    (add-hook 'elpy-mode-hook 'flycheck-mode)))))

(use-package blacken
  :ensure t)

(use-package py-autopep8
  :ensure t
  :init
  (add-hook 'elpy-mode-hook #'py-autopep8-enable-on-save))
#+end_src
* Text-editor
** spellcheck
#+BEGIN_SRC emacs-lisp

(setq ispell-program-name (executable-find "hunspell"))
(setq ispell-local-dictionary "en_US")
(setq ispell-local-dictionary-alist
      '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))

(add-hook 'org-mode-hook 'flyspell-mode)

#+END_SRC
** sudo edit
#+BEGIN_SRC emacs-lisp

(defun er-doas-edit (&optional arg)
  "Edit currently visited file as root With a prefix ARG prompt for a file to visit.  Will also prompt for a file to visit if current buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/doas:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/doas:root@localhost:" buffer-file-name))))



(defun er-sudo-edit (&optional arg)
  "Edit currently visited file as root With a prefix ARG prompt for a file to visit.  Will also prompt for a file to visit if current buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))


#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp

;; tell emacs not to use the clipboard
                                        ;(setq x-select-enable-clipboard nil)

(global-set-key (kbd "M-i") 'ido-switch-buffer)

#+END_SRC
** snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (require 'yasnippet)
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode))

(use-package yasnippet-snippets
  :ensure t)
#+end_src
* emacs-os
#+begin_src emacs-lisp
(when 
    (or (string= system-name "Southpark") (string= system-name "Springfield"))
  (require 'ryan-os))
#+end_src


