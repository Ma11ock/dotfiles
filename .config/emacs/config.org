#+TITLE: Ryan Jeffrey's Emacs config
#+AUTHOR: Ryan Jeffrey
#+EMAIL: ryan@ryanmj.xyz
#+OPTIONS: num:nil
* Emacs
** init
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))

(defalias 'yes-or-no-p 'y-or-n-p)

(set-frame-parameter (selected-frame) 'alpha '(85 . 85))
(add-to-list 'default-frame-alist '(alpha . (85 . 85)))

#+END_SRC
** quelpa packages
#+begin_src emacs-lisp

(quelpa
 '(ox-thtml
   :fetcher git
   :url "https://github.com/juanjosegarciaripoll/org-thtml"))

#+end_src
** font and theme
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path (concat user-emacs-directory "lisp/"))

(setq x-gtk-use-system-tooltips nil)     

;; font
(when (not (eq system-type 'windows-nt))
  (if (string= system-name "Southpark")
      (add-to-list 'default-frame-alist
		           '(font . "Iosevka:size=22"))
    (add-to-list 'default-frame-alist
		         '(font . "Iosevka:size=18"))))

(use-package prettify-symbols-mode
  :init 
  (defconst lisp--prettify-symbols-alist
    '(("lambda"  . ?Î»)))
  :hook
  (lisp-mode))


(add-to-list 'load-path (concat user-emacs-directory "/themes/"))
(setq custom-safe-themes t)   ; Treat all themes as safe
(quelpa
 '(replace-colorthemes
   :fetcher git
   :url "https://github.com/emacs-jp/replace-colorthemes"))

(use-package modus-themes
  :ensure t
  :init
  (setq modus-themes-bold-constructs t
        modus-themes-mode-line '3d
        modus-themes-italic-constructs t
        modus-themes-mixed-fonts nil
        modus-themes-subtle-line-numbers nil
        modus-themes-intense-markup t)

  (modus-themes-load-themes)
  (modus-themes-load-vivendi))

(display-time-mode 1)
(display-battery-mode 1)
(defvar mode-line-modes
      `(:propertize ("" mode-name)
                    help-echo "Major mode\n\
mouse-1: Display major mode menu\n\
mouse-2: Show help for major mode\n\
mouse-3: Toggle minor modes"
                    mouse-face mode-line-highlight
                    local-map ,mode-line-major-mode-keymap))
;; Clarity
;; Hober
;; Comidia
;; Dark laptop
;; euphoria
;; late-night
;; ld-dark
;; simple-1
;; subdued
;; TODO make joe theme

                                        ; arjen
                                        ; dark laptop
                                        ; euphoria
                                        ; simple-1

#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :init
  (global-set-key (kbd "C-s") 'swiper)
  :ensure t)

(use-package counsel
  :ensure t)

#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
:ensure t
:hook (prog-mode . rainbow-delimiters-mode))

(save-place-mode 1) 
(setq tty-menu-open-use-tmm t)
(global-set-key [f10] 'tmm-menubar)
(put 'upcase-region 'disabled nil)
(electric-pair-mode t)
(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq column-number-mode t)
(tool-bar-mode -1)
(menu-bar-mode -1) 
(scroll-bar-mode -1)
(setq ring-bell-function 'ignore)
(blink-cursor-mode 0)
(set-language-environment "UTF-8")
(setq redisplay-dont-pause t)
(setq vc-follow-symlinks t) ; Otherwise emacs asks
(setq tramp-terminal-type "tramp") ; See zshrc
(add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
(setq-default truncate-lines t)
;; scroll one line at a time (less "jumpy" than defaults)

(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

(use-package good-scroll
  :ensure t
  :init
  (good-scroll-mode 1))

(use-package smooth-scrolling
  :ensure t
  :init
  (setq smooth-scroll-margin 1) 
  (smooth-scrolling-mode 1))
;; Do not jump scroll
(setq auto-window-vscroll nil)
(setq scroll-conservatively 10)
(setq scroll-margin 1)

;; Column 80 fill line.
(setq display-fill-column-indicator-column 80)
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)


(setenv "MANWIDTH" "100") ; For man mode

;; Man-mode auto-kill frame on exit. Should only be called from shell.
(defun man-mode-shell (man-page)
  (add-hook 'man-end-hook '(lambda () 
                             (setq man-end-hook nil)
                             (delete-frame)
                             (message "Heck")))
  (man man-page)
  (delete-window))

;; TODO Smithets
(global-set-key (kbd "M-SPC") #'(lambda ()
                                  (interactive)
                                  (search-forward "<++>")
                                  (delete-backward-char 4)))

(use-package command-log-mode
  :ensure t)

#+END_SRC

** Filename-mode associations, modes for specific file types
#+BEGIN_SRC emacs-lisp

(use-package conf-mode
  :init
  (add-to-list 'auto-mode-alist '("/sxhkdrc\\'" . conf-unix-mode))
  (add-to-list 'auto-mode-alist '("/zshrc\\'" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\config\\'" . conf-mode))
  (add-to-list 'auto-mode-alist '("\\.Xdefaults'" . conf-xdefaults-mode))
  (add-to-list 'auto-mode-alist '("\\.Xresources'" conf-xdefaults-mode))
  (add-to-list 'auto-mode-alist '("\\.Xdefaults'" . conf-xdefaults-mode)))


(use-package systemd
  :ensure t
  :mode (("\\.service\\'" . systemd-mode)))

(use-package fish-mode
  :ensure t
  :mode (("\\.fish\\'" . fish-mode)))

#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
(use-package rustic
  :ensure t
  :mode (("\\.rs\\'" . rustic-mode))
  :config
  (setq rustic-format-on-save t))

#+END_SRC
** toml
#+BEGIN_SRC emacs-lisp

(use-package toml-mode
:ensure t)
#+END_SRC
** evil mode
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t)
(use-package highlight
  :ensure t)
(use-package evil
  :ensure t
  :init
  (setq evil-want-keybinding nil)
  (global-undo-tree-mode)
  (setq evil-undo-system 'undo-tree)
  (evil-mode 1)
  (use-package evil-collection
    :ensure t
    :init
    (evil-collection-init))
  (setq-default evil-cross-lines t)

  ;; Code snippet for color
  ;;evil-emacs-state-tag    (propertize "  EMACS  " 'face '((:background "turquoise" :foreground "black")))
  (setq evil-normal-state-tag   (propertize "-COMMAND-" 'face '((:foreground "turquoise")))
        evil-emacs-state-tag    (propertize "--EMACS--" 'face '((:foreground "blue")))
        evil-insert-state-tag   (propertize "--INSRT--" 'face '((:foreground "gold")))
        evil-replace-state-tag  (propertize "-REPLACE-" 'face '((:foreground "cyan")))
        evil-motion-state-tag   (propertize "--MOTION-" 'face '((:foreground "grey")))
        evil-visual-state-tag   (propertize "--VISUAL-" 'face '((:foreground "magenta")))
        evil-operator-state-tag (propertize " OPERATE-" 'face '((:foreground "grey"))))
  (setq evil-insert-state-cursor '(bar  "green")
        evil-normal-state-cursor '(box "magenta"))

  (use-package evil-terminal-cursor-changer
    :ensure t
    :init
    (evil-terminal-cursor-changer-activate))

  (global-unset-key (kbd "C-SPC"))
  (define-key evil-normal-state-map (kbd "SPC") nil)
  (define-key evil-visual-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "SPC") nil)

  (evil-define-key nil 'global (kbd "<leader>er") #'eval-region)
  (evil-define-key nil 'global (kbd "<leader>ez") #'suspend-frame)
  (evil-define-key nil 'global (kbd "<leader>ss") #'split-window-horizontally)
  (evil-define-key nil 'global (kbd "<leader>so") #'split-window-vertically)
  (evil-define-key nil 'global (kbd "<leader>x") #'execute-extended-command)
;; This keybind must be bound to normal map for some reason.
  (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle)
  ;; set leader key in all states
  (evil-set-leader 'insert (kbd "C-SPC"))
  (evil-set-leader 'normal (kbd "SPC"))
  (evil-set-leader 'visual (kbd "SPC"))

  (define-key evil-visual-state-map (kbd "TAB") #'indent-region))

;; global move window keys so non joestar buffers can still have these bindings
(global-set-key (kbd "M-<left>") #'(lambda ()
                                     (interactive)
                                     (other-window -1)))

(global-set-key (kbd "M-<right>") #'(lambda ()
                                      (interactive)
                                      (other-window 1)))

#+END_SRC
** markdown
#+begin_src emacs-lisp

(use-package markdown-mode
  :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

#+end_src
** org
#+BEGIN_SRC emacs-lisp

(use-package org
  :init 
  (setq org-src-preserve-indentation nil 
        org-edit-src-content-indentation 0)
  (require 'org-tempo)

  (setq org-src-tab-acts-natively t)
  :bind (:map org-mode-map
              ("M-S-<up>" . 'text-scale-increase)
              ("M-S-<down>" . 'text-scale-decrease)))

(use-package org-indent-mode
  :config
  (org-indent-mode t)
  :hook org-mode)

(quelpa
 '(ox-thtml
   :fetcher git
   :url "https://github.com/Ma11ock/org-thtml"))

(use-package org-bullets
  :ensure t)

(use-package wc-mode
  :ensure t
  :hook org-mode)


(use-package display-line-numbers-mode
  :hook (prog-mode org-mode LaTex-mode)
  :init
  (setq display-line-numbers-type 'relative))


;; Configuring LaTeX must be done like this because of legacy. 
(use-package tex-mode
  :ensure auctex
  :init
  (use-package company-auctex
    :ensure t)

  (use-package auctex-latexmk
    :ensure t)

  (require 'tex-buf)
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq Tex-command-default "LatexMk")
  (setq-default TeX-master nil)
  (setq-default TeX-engine 'luatex)
  (setq-default TeX-PDF-mode t)
  (setq-default TeX-show-compilation nil)
  (setq-default TeX-process-asynchronous t)
  ;(setq-default TeX-save-query nil)
  (add-hook 'LaTeX-mode-hook #'flyspell-mode)
  (add-hook 'LaTeX-mode-hook #'wc-mode)
  (add-hook 'LaTeX-mode-hook #'company-auctex-init)
  (add-hook 'LaTeX-mode-hook #'company-mode)
  (add-hook 'LaTeX-mode-hook #'TeX-source-correlate-mode)
  (add-hook 'LaTeX-mode-hook #'TeX-interactive-mode)
  :config
  (add-hook 'after-save-hook #'(lambda ()
                                 (let* ((master-file (TeX-master-file)))
                                   (TeX-command "LatexMk" #'TeX-master-file))))

  (require 'auctex-latexmk)
  (auctex-latexmk-setup))

#+End_src
** vterm
#+BEGIN_SRC emacs-lisp
(when (and module-file-suffix (not (eq system-type 'windows-nt)))
  (use-package vterm
    :ensure t
    :init (setq vterm-always-compile-module t)
    :bind (:map vterm-mode-map
                ("M-c" . 'vterm-copy-mode)
                ("M-i" . 'ido-switch-buffer))))

#+END_SRC
** ivy
#+begin_src emacs-lisp

(use-package ivy
  :ensure t
  :init
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)

  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
;; Swiper
  (evil-define-key 'normal 'global (kbd "<leader>f") #'swiper)
;; Counsel
  (evil-define-key 'normal 'global (kbd "<leader>cf") #'counsel-fzf)
  (evil-define-key 'normal 'global (kbd "<leader>co") #'counsel-find-file)
  (evil-define-key 'normal 'global (kbd "<leader>cdf") #'counsel-describe-function)
  (evil-define-key 'normal 'global (kbd "<leader>cds") #'counsel-describe-variable)
  (evil-define-key 'normal 'global (kbd "<leader>cdv") #'counsel-describe-symbol)
  (evil-define-key 'normal 'global (kbd "<leader>cdb") #'counsel-descbinds)
  (evil-define-key 'normal 'global (kbd "<leader>dl") #'counsel-info-lookup-symbol)
  (evil-define-key 'normal 'global (kbd "<leader>cg") #'counsel-git)
  (evil-define-key 'normal 'global (kbd "<leader>cG") #'counsel-grep)
  (evil-define-key 'normal 'global (kbd "<leader>cl") #'counsel-locate)
  (evil-define-key 'normal 'global (kbd "<leader>ca") #'counsel-ag)
  (evil-define-key 'normal 'global (kbd "<leader>cr") #'counsel-rhythmbox)
  (evil-define-key 'normal 'global (kbd "<leader>cu") #'counsel-unicode-char)
  (evil-define-key 'normal 'global (kbd "<leader>cu") #'counsel-file-jump)
  (evil-define-key 'normal 'global (kbd "<leader>cb") #'counsel-bookmark)
  (evil-define-key 'normal 'global (kbd "<leader>cu") #'counsel-org-file)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (evil-define-key 'normal 'global (kbd "<leader>SPC") #'counsel-M-x)
;; General ivy
  (evil-define-key 'normal 'global (kbd "<leader>ip") #'ivy-push-view)
  (evil-define-key 'normal 'global (kbd "<leader>iP") #'ivy-pop-view)
  (evil-define-key 'normal 'global (kbd "<leader>is") #'ivy-switch-buffer)
  (evil-define-key 'normal 'global (kbd "<leader>ir") #'ivy-resume)
  (evil-define-key 'normal 'global (kbd "<leader>is") #'ivy-switch-buffer)
  (global-set-key (kbd "M-i") 'ivy-switch-buffer))

#+end_src
* IDE
** Prettify
#+begin_src emacs-lisp

(use-package format-all
:ensure t)

#+end_src
** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
:ensure t)

(use-package haskell-snippets
:ensure t)

(use-package haskell-tab-indent
:ensure t)
#+end_src
** LSP
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :init
  ;; optional if you want which-key integration
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode :ensure t)

  ;; optionally if you want to use debugger
  (use-package dap-mode
    :ensure t)

  (use-package lsp-treemacs
    :ensure t
    :hook dart-mode)
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (dart-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; (use-package dap-LANGUAGE) to load the dap adapter for your language

#+end_src
** YAML
#+begin_src emacs-lisp

(use-package yaml-mode
:ensure t)

#+end_src
** flutter
#+begin_src emacs-lisp
(use-package dart-mode
  :ensure t
  :init
  (with-eval-after-load 'projectile
    (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
    (add-to-list 'projectile-project-root-files-bottom-up "BUILD"))

  (setq gc-cons-threshold (* 100 1024 1024)
        read-process-output-max (* 1024 1024)
        company-minimum-prefix-length 1
        lsp-lens-enable t
        lsp-signature-auto-activate nil)
  (use-package flutter
    :ensure t
    :after dart-mode
    :bind (:map dart-mode-map
                ("s-f" . #'flutter-run-or-hot-reload))
    :custom
    (if (eq system-type 'windows-nt)
        (flutter-sdk-path "C:\\Users\\Ryan\\Documents\\flutter\\bin")
      (flutter-sdk-path "/opt/flutter/bin")))

  (use-package lsp-dart
    :ensure t
    :hook dart-mode)

  (use-package hover
    :ensure t
    :hook dart-mode)

  (setq gc-cons-threshold (* 100 1024 1024)
        read-process-output-max (* 1024 1024)
        company-minimum-prefix-length 1
        lsp-lens-enable t
        lsp-signature-auto-activate nil))

#+end_src
** Clojure 
#+begin_src emacs-lisp
 (use-package cider
  :ensure t
  :bind (:map cider-mode-map
              ("M-e" . cider-eval-last-sexp)
              ("M-r" . cider-eval-region)
              )
  :init
  (eval-after-load "cider-mode"
    '(define-key cider-mode-map (kbd "C-x") 'joe-nextword)))

(use-package clojure-mode
  :ensure t)
#+end_src
** all programming languages
*** company
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :init (add-hook 'prog-mode-hook 'company-mode)
  :bind (:map company-active-map
              ("C-n" . company-select-next)
              ("C-p" . company-select-previous))
  :config
  (setq company-idle-delay 0.3)
  (setq company-tooltip-align-annotations t) ; aligns annotation to the right hand side
  (setq company-minimum-prefix-length 1)
  (setq company-clang-arguments '("-std=c++17"))
  (use-package company-c-headers
    :ensure t
    :init
    (add-to-list 'company-backends 'company-c-headers)))
#+end_src
*** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t)

#+end_src

** magit
#+begin_src emacs-lisp
(use-package with-editor
:ensure t)

(use-package magit
  :ensure t
  :init
  (add-hook 'diff-mode-hook #'whitespace-mode)
  (add-hook 'git-commit-setup-hook #'git-commit-turn-on-flyspell))

#+end_src
** Misc
#+BEGIN_SRC emacs-lisp
(defun insert-current-date ()
  (interactive)
  (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))

(use-package git-modes
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.gitignore\\'" . gitignore-mode)) )

(use-package rainbow-mode
  :ensure t
  :hook (web-mode emacs-lisp-mode))

(use-package crontab-mode
  :ensure t)

(add-hook 'prog-mode-hook #'flyspell-prog-mode) ; Flyspell on comments and strings.

(use-package cmake-mode
  :ensure t)

(use-package etc-sudoers-mode
  :ensure t)

#+END_SRC
** html 
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.api\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("/some/react/path/.*\\.js[x]?\\'" . web-mode))

  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-engines-alist
        '(("php"    . "\\.phtml\\'")
          ("blade"  . "\\.blade\\.")
          ("handlebars" . "\\.handlebars\\'")))

  (setq web-mode-content-types-alist
        '(("json" . "/some/path/.*\\.api\\'")
          ("xml"  . "/other/path/.*\\.api\\'")
          ("jsx"  . "/some/react/path/.*\\.js[x]?\\'")))
  (setq web-mode-markup-indent-offset 2)
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.handlebars\\'" . web-mode))
  (define-key web-mode-map (kbd "C-n") 'web-mode-tag-match)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-auto-closing t))

(use-package impatient-mode
  :ensure t
  :hook web-mode)

#+END_SRC
*** Emmet
#+BEGIN_SRC emacs-lisp

(use-package emmet-mode
  :ensure t
  :config
  (define-key web-mode-map (kbd "C-j") 'emmet-expand-line)
  (emmet-mode)
                                        ;      (emmet-preview-mode)
  :hook web-mode)

#+END_SRC

** C 
#+begin_src emacs-lisp

(use-package cc-mode
  :config
  (setq c-default-style "linux"
        c-basic-offset 4)
  (c-set-offset 'inline-open '0))


#+end_src
** JavaScript
#+begin_src emacs-lisp
(setq js-indent-level 2)
(use-package json-mode
  :ensure t)
;; Typescript
(use-package typescript-mode
  :ensure t)
#+end_src
** Python
#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :init
  (add-hook 'python-mode-hook #'(lambda ()
                                  (elpy-enable)
                                  (when (require 'flycheck nil t)
                                    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
                                    (add-hook 'elpy-mode-hook 'flycheck-mode)))))

(use-package blacken
  :ensure t)

(use-package py-autopep8
  :ensure t
  :init
  (add-hook 'elpy-mode-hook #'py-autopep8-enable-on-save))
#+end_src
** golang
#+begin_src emacs-lisp
(use-package go-mode
:ensure t
:init
(add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
(add-hook 'go-mode-hook 'lsp-deferred)
(add-hook 'before-save-hook 'gofmt-before-save))
#+end_src
** gdscript
#+begin_src emacs-lisp
(use-package gdscript-mode
  :ensure t
  :init
  (defun lsp--gdscript-ignore-errors (original-function &rest args)
    "Ignore the error message resulting from Godot not replying to the `JSONRPC' request."
    (if (string-equal major-mode "gdscript-mode")
        (let ((json-data (nth 0 args)))
          (if (and (string= (gethash "jsonrpc" json-data "") "2.0")
                   (not (gethash "id" json-data nil))
                   (not (gethash "method" json-data nil)))
              nil ; (message "Method not found")
            (apply original-function args)))
      (apply original-function args)))
  ;; Runs the function `lsp--gdscript-ignore-errors` around `lsp--get-message-type` to suppress unknown notification errors.
  (advice-add #'lsp--get-message-type :around #'lsp--gdscript-ignore-errors)
  (setq gdscript-godot-executable "/usr/bin/godot")
  (setq gdscript-use-tab-indents nil)
  (setq gdscript-indent-offset 4)
  (setq gdscript-docs-local-path "/home/ryan/Documents/godot-docs/_build/html/")
  :config
  (auto-revert-mode))
#+end_src
** glsl
#+begin_src emacs-lisp

(use-package glsl-mode
  :ensure t)

#+end_src
** gradle
#+begin_src emacs-lisp
(use-package gradle-mode
:ensure t)

(use-package groovy-mode
:ensure t)
#+end_src
** Lua
#+begin_src emacs-lisp

(use-package lua-mode
:ensure t)

#+end_src
* Text-editor
** spellcheck
#+BEGIN_SRC emacs-lisp

(setq ispell-program-name (executable-find "hunspell"))
(setq ispell-local-dictionary "en_US")
(setq ispell-local-dictionary-alist
      '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))

(add-hook 'org-mode-hook 'flyspell-mode)

#+END_SRC
** sudo edit
#+BEGIN_SRC emacs-lisp

(defun er-doas-edit (&optional arg)
  "Edit currently visited file as root With a prefix ARG prompt for a file to visit.  Will also prompt for a file to visit if current buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/doas:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/doas:root@localhost:" buffer-file-name))))



(defun er-sudo-edit (&optional arg)
  "Edit currently visited file as root With a prefix ARG prompt for a file to visit.  Will also prompt for a file to visit if current buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))


#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp

;; tell emacs not to use the clipboard
                                        ;(setq x-select-enable-clipboard nil)
;; Left-to-right by default for slight performance increase.
(setq-default bidi-paragraph-direction 'left-to-right)
(setq bidi-inhibit-bpa t)
;; For slight performance increase with long lines.
(global-so-long-mode 1)

;; For asynchronous.
(use-package async
  :ensure t)

(use-package emojify
:ensure t)
#+END_SRC
** snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (require 'yasnippet)
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode))

(use-package yasnippet-snippets
  :ensure t)
#+end_src
* emacs-os
#+begin_src emacs-lisp
(when 
    (or (string= system-name "Southpark") (string= system-name "Springfield"))
  (require 'ryan-os))
#+end_src


